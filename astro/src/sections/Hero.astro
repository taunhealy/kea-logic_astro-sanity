---
import type { HTMLAttributes } from 'astro/types';
import { urlForImage } from '../lib/urlForImage';
import { SITE_TITLE } from '../constants';
import { gsap } from 'gsap';

interface Props {
  heroImage?: {
    asset: {
      _ref: string;
    };
  };
  heroVideo?: string;
  heroTitle?: string;
  heroSubtitle?: string;
  heroLogos?: Array<{
    asset: {
      _ref: string;
    };
  }>;
}

// extracting the properties from Sanity database so we can use them in the Hero component
const { heroImage, heroVideo, heroTitle, heroSubtitle, heroLogos } = Astro.props;
---

<section class="hero bg-black flex flex-col h-[100vh]">
  <div class="section-padding flex flex-col items-left py-[0px] gap-[90px] pt-[120px]">
    <div class="titles-container flex flex-col gap-[16px] max-w-[540px] h-full">
      <h4 class="text-white">Kea Logic</h4>
      <h1 class="text-white">Creating <span class="word-fast">fast</span> and <span class="word-minimal">minimal</span> <span class="word-content">content</span> websites.</h1>
    </div>
    <div class="beam min-h-[30vh] flex gap-[0px] overflow-hidden">
      <div class="beams-container relative w-full h-[200px]">
        <div class="beam-purple absolute h-[16px] w-[120px] bg-purple-500 rounded-lg"></div>
        <div class="beam-green absolute h-[16px] w-[120px] bg-green-500 rounded-lg top-[40px]"></div>
        <div class="beam-orange absolute h-[16px] w-[120px] bg-orange-500 rounded-lg top-[80px]"></div>
        
        <div class="beam-purple-mirror absolute h-[16px] w-[120px] bg-purple-500 rounded-lg"></div>
        <div class="beam-green-mirror absolute h-[16px] w-[120px] bg-green-500 rounded-lg top-[40px]"></div>
        <div class="beam-orange-mirror absolute h-[16px] w-[120px] bg-orange-500 rounded-lg top-[80px]"></div>
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';

  document.addEventListener('DOMContentLoaded', () => {
    const leftBeams = document.querySelectorAll('.beams-container > div:not([class*="-mirror"])');
    const rightBeams = document.querySelectorAll('.beams-container > div[class*="-mirror"]');
    const fastWord = document.querySelector('.word-fast');
    const minimalWord = document.querySelector('.word-minimal');
    const contentWord = document.querySelector('.word-content');
    
    // Set initial state for words
    gsap.set([fastWord, minimalWord, contentWord], {
      color: '#ffffff'
    });

    // Left-to-right beams
    leftBeams.forEach((beam, index) => {
      gsap.set(beam, { 
        x: -200,
        y: index * 40
      });
      
      gsap.to(beam, {
        x: '100vw',
        duration: 3,
        ease: "power2.inOut",
        repeat: -1,
        delay: index * 0.3,
        yoyo: true,
        onUpdate: function() {
          const progress = this.progress();
          if (progress > 0.2 && progress < 0.4) {
            if (index === 0) gsap.to(fastWord, { color: '#a855f7', duration: 0.3 });
            if (index === 1) gsap.to(minimalWord, { color: '#22c55e', duration: 0.3 });
            if (index === 2) gsap.to(contentWord, { color: '#f97316', duration: 0.3 });
          } else {
            if (index === 0) gsap.to(fastWord, { color: '#ffffff', duration: 0.5 });
            if (index === 1) gsap.to(minimalWord, { color: '#ffffff', duration: 0.5 });
            if (index === 2) gsap.to(contentWord, { color: '#ffffff', duration: 0.5 });
          }
        }
      });
    });

    // Right-to-left beams
    rightBeams.forEach((beam, index) => {
      gsap.set(beam, { 
        x: '100vw',
        y: index * 40
      });
      
      gsap.to(beam, {
        x: -200,
        duration: 3,
        ease: "power2.inOut",
        repeat: -1,
        delay: (index * 0.3) + 1.5, // Offset the start time
        yoyo: true,
        onUpdate: function() {
          const progress = this.progress();
          if (progress > 0.6 && progress < 0.8) { // Adjusted trigger point for right-to-left
            if (index === 0) gsap.to(fastWord, { color: '#a855f7', duration: 0.3 });
            if (index === 1) gsap.to(minimalWord, { color: '#22c55e', duration: 0.3 });
            if (index === 2) gsap.to(contentWord, { color: '#f97316', duration: 0.3 });
          } else {
            if (index === 0) gsap.to(fastWord, { color: '#ffffff', duration: 0.5 });
            if (index === 1) gsap.to(minimalWord, { color: '#ffffff', duration: 0.5 });
            if (index === 2) gsap.to(contentWord, { color: '#ffffff', duration: 0.5 });
          }
        }
      });
    });
  });
</script>